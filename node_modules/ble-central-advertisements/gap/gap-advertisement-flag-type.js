// Options stolen from nordic code
// /**@defgroup BLE_GAP_ADV_FLAGS GAP Advertisement Flags
//  * @{ */
// #define BLE_GAP_ADV_FLAG_LE_LIMITED_DISC_MODE         (0x01)   /**< LE Limited Discoverable Mode. */
// #define BLE_GAP_ADV_FLAG_LE_GENERAL_DISC_MODE         (0x02)   /**< LE General Discoverable Mode. */
// #define BLE_GAP_ADV_FLAG_BR_EDR_NOT_SUPPORTED         (0x04)   /**< BR/EDR not supported. */
// #define BLE_GAP_ADV_FLAG_LE_BR_EDR_CONTROLLER         (0x08)   /**< Simultaneous LE and BR/EDR, Controller. */
// #define BLE_GAP_ADV_FLAG_LE_BR_EDR_HOST               (0x10)   /**< Simultaneous LE and BR/EDR, Host. */
// #define BLE_GAP_ADV_FLAGS_LE_ONLY_LIMITED_DISC_MODE   (BLE_GAP_ADV_FLAG_LE_LIMITED_DISC_MODE | BLE_GAP_ADV_FLAG_BR_EDR_NOT_SUPPORTED)   /**< LE Limited Discoverable Mode, BR/EDR not supported. */
// #define BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE   (BLE_GAP_ADV_FLAG_LE_GENERAL_DISC_MODE | BLE_GAP_ADV_FLAG_BR_EDR_NOT_SUPPORTED)   /**< LE General Discoverable Mode, BR/EDR not supported. */
// /**@} */
export var GapAdvertisementFlagType;
(function (GapAdvertisementFlagType) {
    GapAdvertisementFlagType[GapAdvertisementFlagType["LE_LIMITED_DISC_MODE"] = 1] = "LE_LIMITED_DISC_MODE";
    GapAdvertisementFlagType[GapAdvertisementFlagType["LE_GENERAL_DISC_MODE"] = 2] = "LE_GENERAL_DISC_MODE";
    GapAdvertisementFlagType[GapAdvertisementFlagType["BR_EDR_NOT_SUPPORTED"] = 4] = "BR_EDR_NOT_SUPPORTED";
    GapAdvertisementFlagType[GapAdvertisementFlagType["LE_BR_EDR_CONTROLLER"] = 8] = "LE_BR_EDR_CONTROLLER";
    GapAdvertisementFlagType[GapAdvertisementFlagType["LE_BR_EDR_HOST"] = 16] = "LE_BR_EDR_HOST";
    GapAdvertisementFlagType[GapAdvertisementFlagType["LE_ONLY_LIMITED_DISC_MODE"] = 5] = "LE_ONLY_LIMITED_DISC_MODE";
    GapAdvertisementFlagType[GapAdvertisementFlagType["LE_ONLY_GENERAL_DISC_MODE"] = 6] = "LE_ONLY_GENERAL_DISC_MODE";
})(GapAdvertisementFlagType || (GapAdvertisementFlagType = {}));
export function isGapAdvertisementFlagRaised(flags, type) {
    return ((flags & type) >>> 0) === type;
}
