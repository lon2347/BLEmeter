import { GapAttributesDictionary } from './gap-attributes-dictionary';
export type GapAttributeValue = Uint8Array;
/**
 * Core set of TLV options for advertising data
 * per the bluetooth spec.
 */
export interface GapAttributesMetadata {
    flags?: GapAttributeValue;
    incompleteListOfServiceUuids16Bit?: GapAttributeValue;
    completeListOfServiceUuids16Bit?: GapAttributeValue;
    incompleteListOfServiceUuids32Bit?: GapAttributeValue;
    completeListOfServiceUuids32Bit?: GapAttributeValue;
    incompleteListOfServiceUuids128Bit?: GapAttributeValue;
    completeListOfServiceUuids128Bit?: GapAttributeValue;
    localNameShortened?: GapAttributeValue;
    localNameComplete?: GapAttributeValue;
    txPowerLevel?: GapAttributeValue;
    deviceClass?: GapAttributeValue;
    simplePairingHashC192?: GapAttributeValue;
    simplePairingRandomizerR192?: GapAttributeValue;
    deviceId?: GapAttributeValue;
    securityManagerOutOfBandFlags?: GapAttributeValue;
    slaveConnectionIntervalRange?: GapAttributeValue;
    listOfServiceSolicitationUuids16Bit?: GapAttributeValue;
    listOfServiceSolicitationUuids128Bit?: GapAttributeValue;
    serviceDataUuid16Bit?: GapAttributeValue;
    targetAddressPublic?: GapAttributeValue;
    targetAddressRandom?: GapAttributeValue;
    appearance?: GapAttributeValue;
    advertisingInterval?: GapAttributeValue;
    leBluetoothDeviceAddress?: GapAttributeValue;
    leRole?: GapAttributeValue;
    simplePairingHashC256?: GapAttributeValue;
    simplePairingRandomizerR256?: GapAttributeValue;
    listOfServiceSolicitationUuids32Bit?: GapAttributeValue;
    serviceDataUuid32Bit?: GapAttributeValue;
    serviceDataUuid128Bit?: GapAttributeValue;
    leSecureConnectionsConfirmationValue?: GapAttributeValue;
    leSecureConnectionsRandomValue?: GapAttributeValue;
    uri?: GapAttributeValue;
    indoorPositioning?: GapAttributeValue;
    transportDiscoveryData?: GapAttributeValue;
    leSupportedFeatures?: GapAttributeValue;
    channelMapUpdateIndication?: GapAttributeValue;
    pbAdv?: GapAttributeValue;
    meshMessage?: GapAttributeValue;
    meshBeacon?: GapAttributeValue;
    bigInfo?: GapAttributeValue;
    broadcastCode?: GapAttributeValue;
    informationData3D?: GapAttributeValue;
    manufacturerSpecificData?: GapAttributeValue;
    [key: string]: GapAttributeValue | undefined;
}
/**
 * Parses the given raw advertising data as a metadata object with all TLV fields
 * processed / converted into named fields.
 */
export declare function parseGapAttributesMetadata(buffer: Uint8Array): GapAttributesMetadata;
/**
 * Transforms a raw dictionary of parsed gap attributes into a strongly typed object.
 */
export declare function parseGapAttributesMetadataFromDictionary(table: GapAttributesDictionary): GapAttributesMetadata;
